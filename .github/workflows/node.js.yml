name: CI Pipeline

# on:
#   pull_request:
#     branches: ["main"]

on:
  push:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install backend dependencies
        run: npm ci
        working-directory: LogArtApp/backend

      - name: Build project
        run: npm run build --if-present
        working-directory: LogArtApp/backend

      - name: Install frontend dependencies
        run: npm ci --legacy-peer-deps
        working-directory: LogArtApp/frontend/LogArt-frontend

      - name: Create SSL directory
        run: mkdir -p LogArtApp/backend/config/ssl
        working-directory: ./

      - name: Write SSL key
        run: printf "%s" "$SSL_KEY" > LogArtApp/backend/config/ssl/server.key
        env:
          SSL_KEY: ${{ secrets.SSL_KEY }}
        working-directory: ./

      - name: Write SSL cert
        run: printf "%s" "$SSL_CERT" > LogArtApp/backend/config/ssl/server.cert
        env:
          SSL_CERT: ${{ secrets.SSL_CERT }}
        working-directory: ./

      - name: Validate SSL files
        run: |
          echo "=== KEY FILE ==="
          ls -l LogArtApp/backend/config/ssl/server.key
          echo -e "\n=== CERT FILE ==="
          ls -l LogArtApp/backend/config/ssl/server.cert

      - name: Start backend &
        run: npm start --loglevel verbose
        env:
          PORT: 8443
          SSL_KEY_PATH: config/ssl/server.key
          SSL_CERT_PATH: config/ssl/server.cert
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}

        working-directory: LogArtApp/backend

      - name: Start frontend
        run: npm run dev &

        working-directory: LogArtApp/frontend/LogArt-frontend

      - name: Wait for backend
        run: npx wait-on https://localhost:8443 --timeout 60000

      - name: Wait for frontend
        run: npx wait-on https://localhost:5173 --timeout 60000

      - name: Run backend tests
        env:
          PORT: ${{ secrets.PORT }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          BASE_URL: ${{ secrets.BASE_URL }}
          SSL_KEY_PATH: ${{ secrets.SSL_KEY_PATH }}
          SSL_CERT_PATH: ${{ secrets.SSL_CERT_PATH }}
        run: npm test
        working-directory: LogArtApp/backend

      - name: Install Playwright browsers
        run: npx playwright install
        working-directory: LogArtApp/frontend/LogArt-frontend

      - name: Run Playwright tests (frontend)
        working-directory: LogArtApp/frontend
        run: npx playwright test --project=chromium
        env:
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_USED_EMAIL: ${{ secrets.TEST_USER_USED_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          TEST_USER_EMAIL_2: ${{ secrets.TEST_USER_EMAIL_2 }}
          TEST_USER_PASSWORD_2: ${{ secrets.TEST_USER_PASSWORD_2 }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL }}
          TEST_ADMIN_EMAIL_2: ${{ secrets.TEST_ADMIN_EMAIL_2 }}
          TEST_ADMIN_WRONG_PASSWORD: ${{ secrets.TEST_ADMIN_WRONG_PASSWORD }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          TEST_USER_WRONG_EMAIL: ${{ secrets.TEST_USER_WRONG_EMAIL }}
          TEST_USER_WRONG_PASSWORD: ${{ secrets.TEST_USER_WRONG_PASSWORD }}
          TEST_USER_NOT_VERIFIED: ${{ secrets.TEST_USER_NOT_VERIFIED }}
          TEST_USER_NEW_EMAIL: ${{ secrets.TEST_USER_NEW_EMAIL }}
          TEST_USER_NEW_USERNAME: ${{ secrets.TEST_USER_NEW_USERNAME }}
          TEST_USER_NEW_FIRSTNAME: ${{ secrets.TEST_USER_NEW_FIRSTNAME }}
          TEST_USER_NEW_LASTNAME: ${{ secrets.TEST_USER_NEW_LASTNAME }}
