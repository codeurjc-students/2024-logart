openapi: 3.0.0
info:
  title: LogArt API
  version: 1.0.0
  description: Documentación API REST para la aplicación LogArt
  contact:
    name: David Moreno Martín
    email: david.moreno.m.w@gmail.com
    url: https://github.com/codeurjc-students/2024-logart
servers:
  - url: https://localhost:443/api/v1
    description: Servidor de desarrollo
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109ca
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        username:
          type: string
          example: juanperez
        email:
          type: string
          format: email
          example: juan.perez@example.com
        role:
          type: string
          example: user
        isVerified:
          type: boolean
          example: true
        hastoken:
          type: boolean
          example: true
        bio:
          type: string
          example: Bio del usuario
        profileImage:
          type: string
          example: https://example.com/profile.jpg
        verificationToken:
          type: string
          example: null
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
    UserRegistered:
      type: object
      properties:
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        email:
          type: string
          format: email
          example: juan.perez@example.com
        username:
          type: string
          example: juanperez
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: pepe@gmail.com
        password:
          type: string
          format: password
          example: hola123
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: Login successful
    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - username
        - email
        - password
      properties:
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        username:
          type: string
          example: juanperez
        email:
          type: string
          format: email
          example: juan.perez@example.com
        password:
          type: string
          format: password
          example: SecurePassword123
    RegisterResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserRegistered'
        message:
          type: string
          example: User registered, please check your email to verify your account
    VerifyUserResponse:
      type: object
      properties:
        message:
          type: string
          example: User verified successfully
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: Logout successful
    AllUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalUsers:
          type: integer
          example: 50
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
    FindUserByIdResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: User found
    DeleteUserResponse:
      type: object
      properties:
        message:
          type: string
          example: User and Data deleted successfully
    UserProfileResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: User profile retrieved successfully
    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        email:
          type: string
          format: email
          example: juan.perez@example.com
        username:
          type: string
          example: juanperez
        bio:
          type: string
          example: Nueva bio del usuario
    UpdateUserProfileResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: User updated successfully
    Discipline:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cb
        name:
          type: string
          example: Canciones
        description:
          type: string
          example: Canciones que has escuchado.
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        updatedAt:
          type: string
          format: date-time
          example: '2022-06-01T12:34:56Z'
    GetAllDisciplinesResponse:
      type: object
      properties:
        disciplines:
          type: array
          items:
            $ref: '#/components/schemas/Discipline'
    Object:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cc
        name:
          type: string
          example: Objeto de Ejemplo
        description:
          type: string
          example: Descripción del objeto de ejemplo.
        imageUrl:
          type: string
          example: https://example.com/images/objects/objeto-ejemplo.jpg
        discipline:
          type: string
          example: 60d0fe4f5311236168a109cb
        createdBy:
          type: string
          example: 60d0fe4f5311236168a109ca
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        updatedAt:
          type: string
          format: date-time
          example: '2022-06-01T12:34:56Z'
    ObjectCreated:
      type: object
      properties:
        name:
          type: string
          example: Objeto de Ejemplo
        description:
          type: string
          example: Descripción del objeto de ejemplo.
        imageUrl:
          type: string
          example: https://example.com/images/objects/objeto-ejemplo.jpg
        discipline:
          type: string
          example: 60d0fe4f5311236168a109cb
        createdBy:
          type: string
          example: 60d0fe4f5311236168a109ca
        _id:
          type: string
          example: 60d0fe4f5311236168a109cc
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        __v:
          type: integer
          example: 0
    ObjectUpdated:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cc
        name:
          type: string
          example: Objeto Actualizado
        description:
          type: string
          example: Descripción actualizada del objeto.
        imageUrl:
          type: string
          example: https://example.com/images/objects/objeto-actualizado.jpg
        discipline:
          type: string
          example: 60d0fe4f5311236168a109cb
        createdBy:
          type: string
          example: 60d0fe4f5311236168a109ca
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        __v:
          type: integer
          example: 0
    ObjectGetGalleryByDiscipline:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cc
        name:
          type: string
          example: Objeto de Ejemplo
        description:
          type: string
          example: Descripción del objeto de ejemplo.
        imageUrl:
          type: string
          example: https://example.com/images/objects/objeto-ejemplo.jpg
        discipline:
          type: string
          example: 60d0fe4f5311236168a109cb
        createdBy:
          type: object
          properties:
            id:
              type: string
              example: 60d0fe4f5311236168a109ca
            username:
              type: string
              example: johndoe
            firstName:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        __v:
          type: integer
          example: 0
    CreateObjectRequest:
      type: object
      required:
        - name
        - disciplineName
      properties:
        name:
          type: string
          example: Objeto de Ejemplo
        description:
          type: string
          example: Descripción del objeto de ejemplo.
        disciplineName:
          type: string
          example: Canciones
        imageUrl:
          type: string
          example: https://example.com/images/objects/objeto-ejemplo.jpg
    CreateObjectResponse:
      type: object
      properties:
        object:
          $ref: '#/components/schemas/ObjectCreated'
        message:
          type: string
          example: Object created successfully
    UpdateObjectRequest:
      type: object
      required:
        - name
        - disciplineName
      properties:
        name:
          type: string
          example: Objeto Actualizado
        description:
          type: string
          example: Descripción actualizada del objeto.
        disciplineName:
          type: string
          example: Canciones
        imageUrl:
          type: string
          example: https://example.com/images/objects/objeto-actualizado.jpg
    UpdateObjectResponse:
      type: object
      properties:
        object:
          $ref: '#/components/schemas/ObjectUpdated'
        message:
          type: string
          example: Object updated successfully
    DeleteObjectResponse:
      type: object
      properties:
        message:
          type: string
          example: Object deleted successfully
    GetGalleryByDisciplineResponse:
      type: object
      properties:
        discipline:
          type: object
          properties:
            id:
              type: string
              example: 60d0fe4f5311236168a109cb
            name:
              type: string
              example: Canciones
        totalObjects:
          type: integer
          example: 1
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ObjectGetGalleryByDiscipline'
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 1
    GetObjectByIdResponse:
      type: object
      properties:
        object:
          $ref: '#/components/schemas/ObjectGetGalleryByDiscipline'
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cd
        content:
          type: string
          example: Este es un comentario de ejemplo.
        object:
          type: string
          example: 60d0fe4f5311236168a109cc
        user:
          type: string
          example: 60d0fe4f5311236168a109ca
        isEditedByAdmin:
          type: boolean
          example: false
        editedBy:
          type: string
          example: null
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        updatedAt:
          type: string
          format: date-time
          example: '2022-01-02T12:34:56Z'
    CommentUpdated:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109cd
        content:
          type: string
          example: Contenido actualizado del comentario.
        object:
          type: string
          example: 60d0fe4f5311236168a109cc
        user:
          type: string
          example: 60d0fe4f5311236168a109ca
        isEditedByAdmin:
          type: boolean
          example: false
        editedBy:
          type: string
          example: null
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
        updatedAt:
          type: string
          format: date-time
          example: '2022-01-02T12:34:56Z'
    CreateCommentRequest:
      type: object
      required:
        - content
        - objectId
      properties:
        content:
          type: string
          example: Este es un comentario de ejemplo.
        objectId:
          type: string
          example: 60d0fe4f5311236168a109cc
    CreateCommentResponse:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
        message:
          type: string
          example: Comment created successfully
    UpdateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          example: Contenido actualizado del comentario.
    UpdateCommentResponse:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/CommentUpdated'
        message:
          type: string
          example: Comment updated successfully
    DeleteCommentResponse:
      type: object
      properties:
        message:
          type: string
          example: Comment deleted successfully
    GetCommentsByObjectIdResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      example:
        comments:
          - _id: 60d0fe4f5311236168a109cd
            content: Este es un comentario de ejemplo.
            object: 60d0fe4f5311236168a109cc
            user: 60d0fe4f5311236168a109ca
            isEditedByAdmin: false
            editedBy: null
            createdAt: '2022-01-01T12:34:56Z'
            updatedAt: '2022-01-02T12:34:56Z'
          - _id: 60d0fe4f5311236168a109ce
            content: Este es otro comentario de ejemplo editado por un admin.
            object: 60d0fe4f5311236168a109cc
            user: 60d0fe4f5311236168a109ca
            isEditedByAdmin: true
            editedBy: 60d0fe4f5311236168a109ca
            createdAt: '2022-01-02T12:34:56Z'
            updatedAt: '2022-01-03T12:34:56Z'
security:
  - BearerAuth: []
paths:
  /auth/:
    post:
      summary: Iniciar sesión de un usuario
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Error, ambos campos son obligatorios
        '401':
          description: >-
            Errores de autenticación, Credenciales inválidas/usuario no
            encontrado/token inválido, cuenta sin verificación.
        '500':
          description: Error interno del servidor
  /users:
    post:
      summary: Registrar un nuevo usuario
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado exitosamente
          headers:
            Location:
              description: URL del nuevo usuario
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Error, todos los campos son obligatorios
        '401':
          description: Errores de autenticación, usuario ya logueado
        '409':
          description: Error, el usuario ya existe
        '500':
          description: Error interno del servidor
    get:
      summary: Obtener todos los usuarios con paginación
      tags:
        - Usuarios
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
          description: Número de usuarios por página
      responses:
        '200':
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsersResponse'
        '401':
          description: Error, Token de autenticación inválido o ausente
        '500':
          description: Error interno del servidor
  /logout:
    post:
      summary: Cerrar sesión de un usuario
      tags:
        - Autenticación
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cierre de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Errores de autenticación, token vacio, token en la lista negra
        '403':
          description: Error, token inválido
        '500':
          description: Error interno del servidor
  /comments:
    post:
      summary: Crear un nuevo comentario
      tags:
        - Comentarios
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comentario creado exitosamente
          headers:
            Location:
              description: URL del nuevo comentario
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentResponse'
        '400':
          description: Error, solicitud incorrecta o datos faltantes
        '403':
          description: Error, no autorizado para comentar en este objeto
        '404':
          description: Error, objeto o usuario no encontrado
        '500':
          description: Error interno del servidor
  /comments/{commentId}:
    put:
      summary: Actualizar un comentario existente
      tags:
        - Comentarios
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID del comentario a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Comentario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentResponse'
        '400':
          description: Error, solicitud incorrecta o formato de ID inválido
        '403':
          description: Error, no autorizado para actualizar este comentario
        '404':
          description: Error, comentario o usuario no encontrado
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar un comentario por su ID
      tags:
        - Comentarios
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: ID del comentario a eliminar
      responses:
        '200':
          description: Comentario eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentResponse'
        '400':
          description: Error, formato de ID de comentario inválido
        '403':
          description: Error, no autorizado para eliminar este comentario
        '404':
          description: Error, comentario o usuario no encontrado
        '500':
          description: Error interno del servidor
  /comments/{objectId}:
    get:
      summary: Obtener comentarios por ID de objeto
      tags:
        - Comentarios
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: objectId
          required: true
          schema:
            type: string
          description: ID del objeto para el cual se desean obtener los comentarios
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página para paginación
        - in: query
          name: limit
          schema:
            type: integer
            default: 3
          description: Número de comentarios por página
        - in: query
          name: commentId
          schema:
            type: string
          description: ID específico de un comentario para obtener detalles
      responses:
        '200':
          description: Lista de comentarios obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsByObjectIdResponse'
        '400':
          description: Error, formato de ID de objeto o comentario inválido
        '403':
          description: Error, no autorizado para ver comentarios de este objeto
        '404':
          description: Error, objeto o comentario no encontrado
        '500':
          description: Error interno del servidor
  /disciplines:
    get:
      summary: Obtener todas las disciplinas
      tags:
        - Disciplinas
      responses:
        '200':
          description: Lista de disciplinas obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDisciplinesResponse'
        '500':
          description: Error interno del servidor al obtener disciplinas
  /objects:
    post:
      summary: Crear un nuevo objeto
      tags:
        - Objetos
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Objeto de Ejemplo
                description:
                  type: string
                  example: Descripción del objeto de ejemplo.
                disciplineName:
                  type: string
                  example: Canciones
                imageUrl:
                  type: string
                  format: binary
                  description: Imagen del objeto
      responses:
        '201':
          description: Objeto creado exitosamente
          headers:
            Location:
              description: URL del nuevo objeto
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateObjectResponse'
        '400':
          description: Error, solicitud incorrecta o datos faltantes
        '404':
          description: Error, disciplina no encontrada
        '500':
          description: Error interno del servidor
  /objects/{objectId}:
    put:
      summary: Actualizar un objeto existente
      tags:
        - Objetos
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: objectId
          required: true
          schema:
            type: string
          description: ID del objeto a actualizar
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Objeto Actualizado
                description:
                  type: string
                  example: Descripción actualizada del objeto.
                disciplineName:
                  type: string
                  example: Canciones
                imageUrl:
                  type: string
                  format: binary
                  description: Nueva imagen del objeto
      responses:
        '200':
          description: Objeto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateObjectResponse'
        '400':
          description: >-
            Error, solicitud incorrecta, datos faltantes o formato de ID
            inválido
        '403':
          description: Error, no autorizado para actualizar este objeto
        '404':
          description: Error, objeto o disciplina no encontrada
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar un objeto por su ID
      tags:
        - Objetos
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: objectId
          required: true
          schema:
            type: string
          description: ID del objeto a eliminar
      responses:
        '200':
          description: Objeto eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteObjectResponse'
        '400':
          description: Error, formato de ID de objeto inválido
        '403':
          description: Error, no autorizado para eliminar este objeto
        '404':
          description: Error, objeto no encontrado
        '500':
          description: Error interno del servidor
  /objects/{disciplineName}:
    get:
      summary: Obtener la galería de objetos por disciplina
      tags:
        - Objetos
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: disciplineName
          required: true
          schema:
            type: string
          description: Nombre de la disciplina
        - in: query
          name: userId
          schema:
            type: string
          description: Filtrar objetos por ID de usuario
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página para paginación
        - in: query
          name: limit
          schema:
            type: integer
            default: 3
          description: Número de objetos por página
        - in: query
          name: objectName
          schema:
            type: string
          description: Filtrar objetos por nombre
      responses:
        '200':
          description: Galería de objetos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGalleryByDisciplineResponse'
        '404':
          description: Error, disciplina no encontrada
        '500':
          description: Error interno del servidor
  /objects/details/{objectId}:
    get:
      summary: Obtener detalles de un objeto por su ID
      tags:
        - Objetos
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: objectId
          required: true
          schema:
            type: string
          description: ID del objeto a buscar
      responses:
        '200':
          description: Detalles del objeto obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectByIdResponse'
        '400':
          description: Error, formato de ID de objeto inválido
        '403':
          description: Error, no autorizado para ver este objeto
        '404':
          description: Error, objeto no encontrado
        '500':
          description: Error interno del servidor
  /users/{userId}:
    get:
      summary: Obtener un usuario por su ID
      tags:
        - Usuarios
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario a buscar
      responses:
        '200':
          description: Usuario encontrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindUserByIdResponse'
        '400':
          description: Error, formato de ID de usuario inválido
        '401':
          description: Error, no autorizado para acceder a este usuario
        '403':
          description: Error, Solo admin puede buscar usuarios
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar un usuario por su ID
      tags:
        - Usuarios
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario a eliminar
      responses:
        '200':
          description: Usuario y datos eliminados exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        '400':
          description: Error, formato de ID de usuario inválido
        '401':
          description: >-
            Error, no autorizado para eliminar este usuario o eliminar cuenta
            propia
        '403':
          description: Error, token de autenticación inválido o ausente
        '404':
          description: Error, usuario no encontrado
        '500':
          description: Error interno del servidor
  /users/profile:
    get:
      summary: Obtener el perfil del usuario autenticado
      tags:
        - Usuarios
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil del usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Error, formato de ID de usuario inválido
        '404':
          description: Error, usuario no encontrado
        '500':
          description: Error interno del servidor
    put:
      summary: Actualizar el perfil del usuario autenticado
      tags:
        - Usuarios
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Juan
                lastName:
                  type: string
                  example: Pérez
                email:
                  type: string
                  format: email
                  example: juan.perez@example.com
                username:
                  type: string
                  example: juanperez
                bio:
                  type: string
                  example: Nueva bio del usuario
                profileImage:
                  type: string
                  format: binary
                  description: Imagen de perfil del usuario
      responses:
        '200':
          description: Perfil del usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserProfileResponse'
        '400':
          description: Formato de ID de usuario inválido
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
tags:
  - name: Autenticación
    description: Operaciones relacionadas con la autenticación de usuarios
  - name: Disciplinas
    description: Operaciones relacionadas con las disciplinas
  - name: Objetos
    description: Operaciones relacionadas con la gestión de objetos
  - name: Comentarios
    description: Operaciones relacionadas con la gestión de comentarios
  - name: Usuarios
    description: Operaciones relacionadas con la gestión de usuarios