openapi: 3.0.0
info:
  title: LogArt API
  version: 1.0.0
  description: Documentación API REST para la aplicación LogArt
  contact:
    name: David Moreno Martín
    email: david.moreno.m.w@gmail.com
    url: https://github.com/codeurjc-students/2024-logart
servers:
  - url: https://localhost:443/api/v1
    description: Servidor de desarrollo
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109ca
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        username:
          type: string
          example: juanperez
        email:
          type: string
          format: email
          example: juan.perez@example.com
        role:
          type: string
          example: user
        isVerified:
          type: boolean
          example: true
        hastoken:
          type: boolean
          example: true
        bio:
          type: string
          example: Bio del usuario
        profileImage:
          type: string
          example: https://example.com/profile.jpg
        verificationToken:
          type: string
          example: null
        createdAt:
          type: string
          format: date-time
          example: '2022-01-01T12:34:56Z'
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: juan.perez@example.com
        password:
          type: string
          format: password
          example: SecurePassword123
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: Login successful
    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - username
        - email
        - password
      properties:
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: Pérez
        username:
          type: string
          example: juanperez
        email:
          type: string
          format: email
          example: juan.perez@example.com
        password:
          type: string
          format: password
          example: SecurePassword123
    RegisterResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: User registered, please check your email to verify your account
    VerifyUserResponse:
      type: object
      properties:
        message:
          type: string
          example: User verified successfully
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: Logout successful
security:
  - BearerAuth: []
paths:
  /auth/login:
    post:
      summary: Iniciar sesión de un usuario
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Solicitud incorrecta
        '401':
          description: Credenciales inválidas
        '500':
          description: Error interno del servidor
  /auth/register:
    post:
      summary: Registrar un nuevo usuario
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado exitosamente
          headers:
            Location:
              description: URL del nuevo usuario
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Solicitud incorrecta
        '409':
          description: El usuario ya existe
        '500':
          description: Error interno del servidor
  /auth/verify/{token}:
    get:
      summary: Verificar la cuenta de un usuario
      tags:
        - Autenticación
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Token de verificación enviado por correo electrónico
      responses:
        '200':
          description: Usuario verificado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserResponse'
        '400':
          description: Token inválido o expirado
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
  /auth/logout:
    post:
      summary: Cerrar sesión de un usuario
      tags:
        - Autenticación
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cierre de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Token de autenticación inválido o ausente
        '500':
          description: Error interno del servidor
tags:
  - name: Autenticación
    description: Operaciones relacionadas con la autenticación de usuarios
